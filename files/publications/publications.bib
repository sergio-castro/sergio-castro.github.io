%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Sergio Castro at 2012-07-09 16:22:48 +0200 


%% Saved with string encoding Unicode (UTF-8) 



@article{2010-scico-castro,
	Abstract = {Correcting design decay in source code is not a trivial task. Diagnosing and subsequently correcting inconsistencies
between a software systems's code and its design rules (e.g., database queries are only allowed in the persistence
layer) and coding conventions can be complex, time-consuming and error-prone. Providing support for this process
is therefore highly desirable, but of a far greater complexity than suggesting basic corrective actions for simplistic
implementation problems (like the ``declare a local variable for non-declared variable'' suggested by Eclipse).
We present an abductive reasoning approach to inconsistency correction that consists of (1) a means for developers
to document and verify a system's design and coding rules, (2) an abductive logic reasoner that hypothesizes possible
causes of inconsistencies between the system's code and the documented rules and (3) a library of corrective actions
for each hypothesized cause. This work builds on our previous work, where we expressed design rules as equality
relationships between sets of source code artifacts (e.g., the set of methods in the persistence layer is the same as
the set of methods that query the database). In this paper, we generalize our approach to design rules expressed as
user-defined binary relationships between two sets of source code artifacts (e.g., every state changing method should
invoke a persistence method).
We illustrate our approach on the design of IntensiVE, a tool suite that enables defining sets of source code artifacts
intensionally (by means of logic queries) and verifying relationships between such sets.},
	Author = {Sergio Castro and Coen De Roover and Andy Kellens and Angela Lozano and Kim Mens and Theo D'Hondt},
	Date-Added = {2010-11-10 16:45:07 +0100},
	Date-Modified = {2011-08-30 17:09:08 +0200},
	Doi = {DOI: 10.1016/j.scico.2010.09.001},
	Issn = {0167-6423},
	Journal = {Science of Computer Programming: Special Issue on Software Evolution, Adaptability and Variability},
	Keywords = {inconsistency management, abductive reasoning, logic meta programming},
	Month = {December},
	Number = {12},
	Pages = {1113-1129},
	Title = {Diagnosing and Correcting Design Inconsistencies in Source Code with Logical Abduction},
	Url = {http://www.sciencedirect.com/science/article/B6V17-511TN7T-1/2/ea5faf2030ad3a65e517e9b8a0c6a2bf},
	Volume = {76},
	Year = {2010},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAcgAAAAAAcgAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMU5wWNIKwAAAA/GzBUyMDEwLXNjaWNvLWNhc3Ryby5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoO0MyMUVqAAAAAAAAAAAAAQAAwAACSAAAAAAAAAAAAAAAAAAAAAGcGFwZXJzABAACAAAxTmzUwAAABEACAAAyMT5iAAAAAEAFAAPxswAD8H1AA+7JwAPdMMAAHwTAAIAUU1hY2ludG9zaCBIRDpVc2VyczoAc2VyZ2lvYzc4OgBEb2N1bWVudHM6AHJlc2VhcmNoOgBwYXBlcnM6ADIwMTAtc2NpY28tY2FzdHJvLnBkZgAADgAsABUAMgAwADEAMAAtAHMAYwBpAGMAbwAtAGMAYQBzAHQAcgBvAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA/VXNlcnMvc2VyZ2lvYzc4L0RvY3VtZW50cy9yZXNlYXJjaC9wYXBlcnMvMjAxMC1zY2ljby1jYXN0cm8ucGRmAAATAAEvAAAVAAIAEP//AACABdIcHR4fWCRjbGFzc2VzWiRjbGFzc25hbWWjHyAhXU5TTXV0YWJsZURhdGFWTlNEYXRhWE5TT2JqZWN0XxAxLi4vLi4vLi4vLi4vcmVzZWFyY2gvcGFwZXJzLzIwMTAtc2NpY28tY2FzdHJvLnBkZtIcHSQloiUhXE5TRGljdGlvbmFyeRIAAYagXxAPTlNLZXllZEFyY2hpdmVyAAgAEQAWAB8AKAAyADUAOgA8AEUASwBSAF0AZQBsAG8AcQBzAHYAeAB6AHwAhgCTAJgAoAJsAm4CcwJ8AocCiwKZAqACqQLdAuIC5QLyAvcAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAADCQ==},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/B6V17-511TN7T-1/2/ea5faf2030ad3a65e517e9b8a0c6a2bf},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/j.scico.2010.09.001}}

@article{2010-scico-brichau,
	Abstract = {The design and implementation of a software system is often governed by a variety
of coding conventions, design patterns, architectural guidelines, design rules, and other
so-called structural regularities. To prevent a deterioration of the system's source code,
it is important that these regularities are verified and enforced upon evolution of the
system. The Intensional Views Environment (IntensiVE), presented in this article, is a
tool suite for specifying relevant structural regularities in an (object-oriented) software
system and verifying them against the current and later versions of the system. At the
heart of the IntensiVE tool suite are (logic) program queries and the model of intensional
views and relations, through which regularities are expressed. Upon verification
of these regularities in the source code of the system, IntensiVE reports the code entities
(i.e. classes, methods, variables, statements, etc.) that violate these constraints.
We present IntensiVE and illustrate its application to the verification of an Abstract
Factory design pattern in the implementation of a software system.},
	Author = {Johan Brichau and Andy Kellens and Sergio Castro and Theo {D'Hondt}},
	Date-Added = {2010-11-10 19:52:38 +0100},
	Date-Modified = {2011-04-03 13:31:37 +0200},
	Journal = {Science of Computer Programming: Experimental Software and Toolkits (EST 3)},
	Keywords = {software evolution, logic meta programming, structural regularities},
	Month = {April},
	Number = {4},
	Pages = {232-246},
	Title = {Enforcing Structural Regularities in Software using IntensiVE},
	Volume = {75},
	Year = {2010},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAcoAAAAAAcoAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMU5wWNIKwAAAA/GzBYyMDEwLXNjaWNvLWJyaWNoYXUucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoOxmxh8tNgAAAAAAAAAAAAQAAwAACSAAAAAAAAAAAAAAAAAAAAAGcGFwZXJzABAACAAAxTmzUwAAABEACAAAxh8RFgAAAAEAFAAPxswAD8H1AA+7JwAPdMMAAHwTAAIAUk1hY2ludG9zaCBIRDpVc2VyczoAc2VyZ2lvYzc4OgBEb2N1bWVudHM6AHJlc2VhcmNoOgBwYXBlcnM6ADIwMTAtc2NpY28tYnJpY2hhdS5wZGYADgAuABYAMgAwADEAMAAtAHMAYwBpAGMAbwAtAGIAcgBpAGMAaABhAHUALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAEBVc2Vycy9zZXJnaW9jNzgvRG9jdW1lbnRzL3Jlc2VhcmNoL3BhcGVycy8yMDEwLXNjaWNvLWJyaWNoYXUucGRmABMAAS8AABUAAgAQ//8AAIAF0hwdHh9YJGNsYXNzZXNaJGNsYXNzbmFtZaMfICFdTlNNdXRhYmxlRGF0YVZOU0RhdGFYTlNPYmplY3RfEDIuLi8uLi8uLi8uLi9yZXNlYXJjaC9wYXBlcnMvMjAxMC1zY2ljby1icmljaGF1LnBkZtIcHSQloiUhXE5TRGljdGlvbmFyeRIAAYagXxAPTlNLZXllZEFyY2hpdmVyAAgAEQAWAB8AKAAyADUAOgA8AEUASwBSAF0AZQBsAG8AcQBzAHYAeAB6AHwAhgCTAJgAoAJuAnACdQJ+AokCjQKbAqICqwLgAuUC6AL1AvoAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAADDA==}}

@conference{2007-sccc-castro,
	Abstract = {Current web-service composition languages, such as 
BPEL, provide inferior support for transaction management. 
Consequently, specifications written in these languages are need- 
lessly complex and hard to reuse. Furthermore, the languages 
themselves are not extensible, making them hard to adapt to 
support new forms of web service composition. Using a unified 
mechanism for dealing with transaction management we are able 
to simplify BPEL specifications, making them more reusable, 
and also allowing easy evolution of the language, addressing 
new forms of composition. In this paper we present DBCF, a 
framework that implements this unified mechanism. Moreover, 
we show how DBCF can be used as a basis for defining a BPEL 
extension that successfully addresses the above problems.},
	Address = {Iquique, Chile},
	Author = {S. Castro and J. Fabry and K. Mens and T. {D'Hondt}},
	Booktitle = {XXVI International Conference of the Chilean Computer Science Society (ICCC)},
	Date-Added = {2008-01-09 21:49:48 +0100},
	Date-Modified = {2011-04-03 12:15:45 +0200},
	Editor = {IEEE Computer Society},
	Keywords = {Web Services composition, ACTA, KALA, Distributed programming},
	Month = {November},
	Rating = {3},
	Read = {Yes},
	Title = {A Unified Mechanism for Improving Advanced Transaction Management in Web Services},
	Year = {2007},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAcIAAAAAAcIAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMU5wWNIKwAAAA/GzBQyMDA3LXNjY2MtY2FzdHJvLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8bewtzsdgAAAAAAAAAAAAQAAwAACSAAAAAAAAAAAAAAAAAAAAAGcGFwZXJzABAACAAAxTmzUwAAABEACAAAwtzQVgAAAAEAFAAPxswAD8H1AA+7JwAPdMMAAHwTAAIAUE1hY2ludG9zaCBIRDpVc2VyczoAc2VyZ2lvYzc4OgBEb2N1bWVudHM6AHJlc2VhcmNoOgBwYXBlcnM6ADIwMDctc2NjYy1jYXN0cm8ucGRmAA4AKgAUADIAMAAwADcALQBzAGMAYwBjAC0AYwBhAHMAdAByAG8ALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAD5Vc2Vycy9zZXJnaW9jNzgvRG9jdW1lbnRzL3Jlc2VhcmNoL3BhcGVycy8yMDA3LXNjY2MtY2FzdHJvLnBkZgATAAEvAAAVAAIAEP//AACABdIcHR4fWCRjbGFzc2VzWiRjbGFzc25hbWWjHyAhXU5TTXV0YWJsZURhdGFWTlNEYXRhWE5TT2JqZWN0XxAwLi4vLi4vLi4vLi4vcmVzZWFyY2gvcGFwZXJzLzIwMDctc2NjYy1jYXN0cm8ucGRm0hwdJCWiJSFcTlNEaWN0aW9uYXJ5EgABhqBfEA9OU0tleWVkQXJjaGl2ZXIACAARABYAHwAoADIANQA6ADwARQBLAFIAXQBlAGwAbwBxAHMAdgB4AHoAfACGAJMAmACgAmYCaAJtAnYCgQKFApMCmgKjAtYC2wLeAusC8AAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAMC}}

@inproceedings{2010-benevol-castro,
	Abstract = {Maintaining consistency between design and implementation is a fundamental issue in software evolution. Although a
certain number of existing tools and techniques provide support for correcting inconsistencies when found, they target
generally-applicable design rules. Unfortunately, in addition to these common design rules, any software system has
an abundance of custom design rules that are very specific to the system at hand. For such custom design rules,
verification and correction are often left to the developer or require a considerable investment in the implementation
of specific verification and correction metaprograms.
HEAL is a framework that alleviates the problem of diagnosing and correcting violations of custom design rules in
code. It supports the implementation and automatic inference of corrective actions (i.e. a program transformation) that
may solve a detected design inconsistency. Using an abductive logic reasoner, HEAL infers these corrective actions
from the design rules themselves and the code over which these rules are verified.
In a previous work we show how simple solutions are generated from a repository of corrective actions to low
level structural problems. In this work, we give one additional step showing that multiple solutions affecting the same
source code element can be composed, presenting to the programmer the complete vision of how the source code
would look like after executing a set of corrective actions.},
	Author = {S. Castro and A. Kellens and C. {De Roover} and K. Mens},
	Booktitle = {9th BElgian-NEtherlands EVOLution Workshop (BENEVOL). Lille, France},
	Date-Added = {2011-03-13 12:12:57 +0100},
	Date-Modified = {2011-04-03 13:33:51 +0200},
	Keywords = {inconsistency management, abductive reasoning, logic meta programming},
	Title = {Generation and Composition of Corrective Actions to Structural Design Problems in Code with Heal},
	Year = {2010},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAdAAAAAAAdAAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMU5wWNIKwAAAA/GzBcyMDEwLWJlbmV2b2wtY2FzdHJvLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoO0UyQCxagAAAAAAAAAAAAQAAwAACSAAAAAAAAAAAAAAAAAAAAAGcGFwZXJzABAACAAAxTmzUwAAABEACAAAyQCjWgAAAAEAFAAPxswAD8H1AA+7JwAPdMMAAHwTAAIAU01hY2ludG9zaCBIRDpVc2VyczoAc2VyZ2lvYzc4OgBEb2N1bWVudHM6AHJlc2VhcmNoOgBwYXBlcnM6ADIwMTAtYmVuZXZvbC1jYXN0cm8ucGRmAAAOADAAFwAyADAAMQAwAC0AYgBlAG4AZQB2AG8AbAAtAGMAYQBzAHQAcgBvAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgBBVXNlcnMvc2VyZ2lvYzc4L0RvY3VtZW50cy9yZXNlYXJjaC9wYXBlcnMvMjAxMC1iZW5ldm9sLWNhc3Ryby5wZGYAABMAAS8AABUAAgAQ//8AAIAF0hwdHh9YJGNsYXNzZXNaJGNsYXNzbmFtZaMfICFdTlNNdXRhYmxlRGF0YVZOU0RhdGFYTlNPYmplY3RfEDMuLi8uLi8uLi8uLi9yZXNlYXJjaC9wYXBlcnMvMjAxMC1iZW5ldm9sLWNhc3Ryby5wZGbSHB0kJaIlIVxOU0RpY3Rpb25hcnkSAAGGoF8QD05TS2V5ZWRBcmNoaXZlcgAIABEAFgAfACgAMgA1ADoAPABFAEsAUgBdAGUAbABvAHEAcwB2AHgAegB8AIYAkwCYAKACdAJ2AnsChAKPApMCoQKoArEC5wLsAu8C/AMBAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAxM=}}

@inproceedings{2012-cop-castro,
	Abstract = {While context-oriented programming technology so far has focused mostly on behavioral adaptation, context-oriented data management has received much less attention. In this paper we make a case for the problem of context-oriented data management, using a concrete example of a mobile application. We illustrate some of the issues involved and propose a lightweight persistency framework, called DynamicSchema, that resolves some of these issues. The solution consists in a flexible reification of the database schema, as a convenient dynamic data structure that can be adapted at execution time, according to sensed context changes. Implementing our mobile application using this framework enabled us to reduce the complexity of the domain modelinglayer, to facilitate the production of code with low memory footprint, and to simplify the implementation of certain scenarios related to context-dependent security concerns.},
	Author = {Castro, Sergio and {Gonz{\'a}lez}, {Sebasti{\'a}n} and Mens, Kim and Denker, Marcus},
	Booktitle = {Proceedings of the Workshop on Context-Oriented Programming (COP'12)},
	Date-Added = {2012-07-09 13:32:31 +0000},
	Date-Modified = {2012-07-09 14:17:44 +0000},
	Keywords = {Context-Oriented Data Management, Data Access Layer, Dynamic Adaptability, Persistency},
	Title = {DynamicSchema: A Lightweight Persistency Framework for Context-Oriented Data Management},
	Year = {2012},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAcAAAAAAAcAAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMU5wWNIKwAAAA/GzBMyMDEyLWNvcC1jYXN0cm8ucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC1hkpy596rAAAAAAAAAAAAAQAAwAACSAAAAAAAAAAAAAAAAAAAAAGcGFwZXJzABAACAAAxTmzUwAAABEACAAAy59ejAAAAAEAFAAPxswAD8H1AA+7JwAPdMMAAHwTAAIAT01hY2ludG9zaCBIRDpVc2VyczoAc2VyZ2lvYzc4OgBEb2N1bWVudHM6AHJlc2VhcmNoOgBwYXBlcnM6ADIwMTItY29wLWNhc3Ryby5wZGYAAA4AKAATADIAMAAxADIALQBjAG8AcAAtAGMAYQBzAHQAcgBvAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA9VXNlcnMvc2VyZ2lvYzc4L0RvY3VtZW50cy9yZXNlYXJjaC9wYXBlcnMvMjAxMi1jb3AtY2FzdHJvLnBkZgAAEwABLwAAFQACABD//wAAgAXSHB0eH1gkY2xhc3Nlc1okY2xhc3NuYW1lox8gIV1OU011dGFibGVEYXRhVk5TRGF0YVhOU09iamVjdF8QLy4uLy4uLy4uLy4uL3Jlc2VhcmNoL3BhcGVycy8yMDEyLWNvcC1jYXN0cm8ucGRm0hwdJCWiJSFcTlNEaWN0aW9uYXJ5EgABhqBfEA9OU0tleWVkQXJjaGl2ZXIACAARABYAHwAoADIANQA6ADwARQBLAFIAXQBlAGwAbwBxAHMAdgB4AHoAfACGAJMAmACgAmQCZgJrAnQCfwKDApECmAKhAtMC2ALbAugC7QAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAL/}}

@inproceedings{2008-wasdett-brichau,
	Abstract = {The design and implementation of a software system is often governed by many different
coding conventions, design patterns, architectural design rules, and other so-called structural
regularities. To prevent a deterioration of the system's source code, it is important
that these regularities are verified and enforced in subsequent evolutions of the system.
The Intensional Views Environment (IntensiVE), presented in this article, is a tool suite for
documenting such structural regularities in (object-oriented) software systems and verifying
their consistency in later versions of those systems.},
	Author = {J. Brichau and A. Kellens and S. Castro and T. D'Hondt},
	Booktitle = {International Workshop on Advanced Software Development Tools and Techniques (WASDeTT). Co-located with the European Conference in Object-Oriented Programming (ECOOP)},
	Date-Added = {2008-05-29 15:56:18 +0200},
	Date-Modified = {2011-04-03 13:36:25 +0200},
	Keywords = {software evolution, logic metaprogramming, software documentation},
	Title = {Enforcing Structural Regularities in Software using IntensiVE},
	Year = {2008},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAdIAAAAAAdIAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMU5wWNIKwAAAA/GzBgyMDA4LXdhc2RldHQtYnJpY2hhdS5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8b5xGGaFAAAAAAAAAAAAAQAAwAACSAAAAAAAAAAAAAAAAAAAAAGcGFwZXJzABAACAAAxTmzUwAAABEACAAAxGF99AAAAAEAFAAPxswAD8H1AA+7JwAPdMMAAHwTAAIAVE1hY2ludG9zaCBIRDpVc2VyczoAc2VyZ2lvYzc4OgBEb2N1bWVudHM6AHJlc2VhcmNoOgBwYXBlcnM6ADIwMDgtd2FzZGV0dC1icmljaGF1LnBkZgAOADIAGAAyADAAMAA4AC0AdwBhAHMAZABlAHQAdAAtAGIAcgBpAGMAaABhAHUALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAEJVc2Vycy9zZXJnaW9jNzgvRG9jdW1lbnRzL3Jlc2VhcmNoL3BhcGVycy8yMDA4LXdhc2RldHQtYnJpY2hhdS5wZGYAEwABLwAAFQACABD//wAAgAXSHB0eH1gkY2xhc3Nlc1okY2xhc3NuYW1lox8gIV1OU011dGFibGVEYXRhVk5TRGF0YVhOU09iamVjdF8QNC4uLy4uLy4uLy4uL3Jlc2VhcmNoL3BhcGVycy8yMDA4LXdhc2RldHQtYnJpY2hhdS5wZGbSHB0kJaIlIVxOU0RpY3Rpb25hcnkSAAGGoF8QD05TS2V5ZWRBcmNoaXZlcgAIABEAFgAfACgAMgA1ADoAPABFAEsAUgBdAGUAbABvAHEAcwB2AHgAegB8AIYAkwCYAKACdgJ4An0ChgKRApUCowKqArMC6gLvAvIC/wMEAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAxY=}}

@inproceedings{2008-qtapc-icpc-castro,
	Abstract = {Numerous tools for documenting code design exist. Each 
of these proposes different techniques and attempts to deal 
with different aspects regarding code design documenta- 
tion. Though this abundance of tools and techniques is a 
clear sign of the importance of such kind of tools in real 
life software implementation, it also creates confusion when 
trying to decide which one best suites the specific needs of 
a project. Adding to this confusion is the fact that different 
tools often use a different terminology for similar problems. 
Furthermore, the support offered by most of these tools is 
limited, since it is often based either on verifiable documen- 
tation that is not highly customizable, or customizable doc- 
umentation that cannot easily be verified. This paper takes 
initial steps in the direction of establishing a common vo- 
cabulary for describing code design documentation tools, 
and highlights the features that a verifiable and highly cus- 
tomizable tool should provide in order to satisfy most of the 
code design documentation requirements present in the im- 
plementation of complex software systems. },
	Author = {S. Castro and K. Mens and J. Brichau},
	Booktitle = {Query Technologies and Applications for Program Comprehension (QTAPC). Collocated Workshop at the IEEE International Conference on Program Comprehension (ICPC)},
	Date-Added = {2008-05-20 22:12:10 +0200},
	Date-Modified = {2011-04-03 12:16:39 +0200},
	Keywords = {taxonomy code design documentation},
	Title = {Towards a Taxonomy of Tools for Documenting Code Design},
	Year = {2008},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAdoAAAAAAdoAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMU5wWNIKwAAAA/GzBoyMDA4LXF0YXBjLWljcGMtY2FzdHJvLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8bxxFD2ngAAAAAAAAAAAAQAAwAACSAAAAAAAAAAAAAAAAAAAAAGcGFwZXJzABAACAAAxTmzUwAAABEACAAAxFDafgAAAAEAFAAPxswAD8H1AA+7JwAPdMMAAHwTAAIAVk1hY2ludG9zaCBIRDpVc2VyczoAc2VyZ2lvYzc4OgBEb2N1bWVudHM6AHJlc2VhcmNoOgBwYXBlcnM6ADIwMDgtcXRhcGMtaWNwYy1jYXN0cm8ucGRmAA4ANgAaADIAMAAwADgALQBxAHQAYQBwAGMALQBpAGMAcABjAC0AYwBhAHMAdAByAG8ALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAERVc2Vycy9zZXJnaW9jNzgvRG9jdW1lbnRzL3Jlc2VhcmNoL3BhcGVycy8yMDA4LXF0YXBjLWljcGMtY2FzdHJvLnBkZgATAAEvAAAVAAIAEP//AACABdIcHR4fWCRjbGFzc2VzWiRjbGFzc25hbWWjHyAhXU5TTXV0YWJsZURhdGFWTlNEYXRhWE5TT2JqZWN0XxA2Li4vLi4vLi4vLi4vcmVzZWFyY2gvcGFwZXJzLzIwMDgtcXRhcGMtaWNwYy1jYXN0cm8ucGRm0hwdJCWiJSFcTlNEaWN0aW9uYXJ5EgABhqBfEA9OU0tleWVkQXJjaGl2ZXIACAARABYAHwAoADIANQA6ADwARQBLAFIAXQBlAGwAbwBxAHMAdgB4AHoAfACGAJMAmACgAn4CgAKFAo4CmQKdAqsCsgK7AvQC+QL8AwkDDgAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAMg}}

@inproceedings{2012-ramse-castro,
	Abstract = {Logic programming is well suited for declaratively solving computational problems that require knowledge representation and reasoning. Object-oriented languages, on the other hand, are well suited for modeling real-world concepts and profit from rich ecosystems developed around them, which are often missing from logic languages. For applications that require both the declarative power of logic programming and the rich modeling expressiveness and development environments offered by object-oriented languages, there is a need for reconciling both worlds. LogicObjects is our linguistic symbiosis framework for integrating Prolog within the Java language. It extends Java with annotations that allow Java programs to interact transparently and automatically with Prolog programs.},
	Author = {Castro, Sergio and Mens, Kim and Moura, Paulo},
	Booktitle = {Proceedings of the Workshop on Reflection, AOP and Meta-Data for Software Evolution (RAM-SE'12)},
	Date-Added = {2012-05-30 07:55:37 +0000},
	Date-Modified = {2012-07-09 14:16:33 +0000},
	Keywords = {Linguistic Symbiosis, Object-Oriented Programming, Logic Programming, Multi-paradigm programming},
	Title = {LogicObjects : A Linguistic Symbiosis Approach to Bring the Declarative Power of Prolog to Java},
	Year = {2012},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAcgAAAAAAcgAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMU5wWNIKwAAAA/GzBUyMDEyLXJhbXNlLWNhc3Ryby5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC1hkqy9aoBgAAAAAAAAAAAAQAAwAACSAAAAAAAAAAAAAAAAAAAAAGcGFwZXJzABAACAAAxTmzUwAAABEACAAAy9aL5gAAAAEAFAAPxswAD8H1AA+7JwAPdMMAAHwTAAIAUU1hY2ludG9zaCBIRDpVc2VyczoAc2VyZ2lvYzc4OgBEb2N1bWVudHM6AHJlc2VhcmNoOgBwYXBlcnM6ADIwMTItcmFtc2UtY2FzdHJvLnBkZgAADgAsABUAMgAwADEAMgAtAHIAYQBtAHMAZQAtAGMAYQBzAHQAcgBvAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA/VXNlcnMvc2VyZ2lvYzc4L0RvY3VtZW50cy9yZXNlYXJjaC9wYXBlcnMvMjAxMi1yYW1zZS1jYXN0cm8ucGRmAAATAAEvAAAVAAIAEP//AACABdIcHR4fWCRjbGFzc2VzWiRjbGFzc25hbWWjHyAhXU5TTXV0YWJsZURhdGFWTlNEYXRhWE5TT2JqZWN0XxAxLi4vLi4vLi4vLi4vcmVzZWFyY2gvcGFwZXJzLzIwMTItcmFtc2UtY2FzdHJvLnBkZtIcHSQloiUhXE5TRGljdGlvbmFyeRIAAYagXxAPTlNLZXllZEFyY2hpdmVyAAgAEQAWAB8AKAAyADUAOgA8AEUASwBSAF0AZQBsAG8AcQBzAHYAeAB6AHwAhgCTAJgAoAJsAm4CcwJ8AocCiwKZAqACqQLdAuIC5QLyAvcAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAADCQ==}}

@inproceedings{2009-iwst-castro,
	Abstract = {In order to alleviate design decay, different program design
documentation techniques are used for the specification and
detection of design inconsistencies in code. However, these
design documentation techniques do not always provide support
for the diagnosis and (semi-) automatic correction of
such inconsistencies. In case they do, corrective solutions
are typically targeted to a reduced set of pre-defined inconsistency
problems, and they are not easily customizable to
new kinds of consistency checks defined by a user. In particular,
they cannot infer possible corrective actions to solve
new user-defined inconsistency problems. In this paper, we
present a technique for the diagnosis and (semi-) automatic
correction of inconsistencies in the context of an existing
tool for inconsistency management: IntensiVE. Our technique
uses logic abductive reasoning to infer solutions to detected
user-defined inconsistencies, starting from basic composable
corrective actions. A first prototype implementing
our technique on top of IntensiVE is shown.},
	Address = {Brest, France},
	Author = {S. Castro and J. Brichau and K. Mens},
	Booktitle = {International Workshop on Smalltalk Technologies (IWST)},
	Date-Added = {2010-02-10 01:25:08 +0100},
	Date-Modified = {2011-04-03 13:35:12 +0200},
	Keywords = {Design inconsistency, diagnosis, correction, abductive reasoning , IntensiVE, SOUL, Smalltalk},
	Title = {Diagnosis and Semi-automatic Correction of Detected Design Inconsistencies in Source Code},
	Year = {2009},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAcIAAAAAAcIAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMU5wWNIKwAAAA/GzBQyMDA5LWl3c3QtY2FzdHJvLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUiKCxri2VAAAAAAAAAAAAAQAAwAACSAAAAAAAAAAAAAAAAAAAAAGcGFwZXJzABAACAAAxTmzUwAAABEACAAAxriaNAAAAAEAFAAPxswAD8H1AA+7JwAPdMMAAHwTAAIAUE1hY2ludG9zaCBIRDpVc2VyczoAc2VyZ2lvYzc4OgBEb2N1bWVudHM6AHJlc2VhcmNoOgBwYXBlcnM6ADIwMDktaXdzdC1jYXN0cm8ucGRmAA4AKgAUADIAMAAwADkALQBpAHcAcwB0AC0AYwBhAHMAdAByAG8ALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAD5Vc2Vycy9zZXJnaW9jNzgvRG9jdW1lbnRzL3Jlc2VhcmNoL3BhcGVycy8yMDA5LWl3c3QtY2FzdHJvLnBkZgATAAEvAAAVAAIAEP//AACABdIcHR4fWCRjbGFzc2VzWiRjbGFzc25hbWWjHyAhXU5TTXV0YWJsZURhdGFWTlNEYXRhWE5TT2JqZWN0XxAwLi4vLi4vLi4vLi4vcmVzZWFyY2gvcGFwZXJzLzIwMDktaXdzdC1jYXN0cm8ucGRm0hwdJCWiJSFcTlNEaWN0aW9uYXJ5EgABhqBfEA9OU0tleWVkQXJjaGl2ZXIACAARABYAHwAoADIANQA6ADwARQBLAFIAXQBlAGwAbwBxAHMAdgB4AHoAfACGAJMAmACgAmYCaAJtAnYCgQKFApMCmgKjAtYC2wLeAusC8AAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAMC}}

@mastersthesis{2006-mastherthesis-castro,
	Abstract = {Advanced transaction management in loosely coupled environments is not a trivial task. 
Web Services are the current state of the art for interoperability for such kind of systems, 
and the BPEL4WS language is nowadays the de facto standard for web services composi- 
tion in industry. However, the BPEL4WS strategy for expressing transactional properties 
is limited, non extensible, and relies on different unrelated constructs for managing the 
concerns of activity synchronization, functional replication and activity compensation. We 
believe that these concerns should be managed using a more simpler, extensible and unified 
set of constructs, relying on well proved existing formal models for advanced transaction 
management. In this work we introduce such a composition framework called DBCF (De- 
pendency Based Composition Framework). DBCF demonstrates the viability of our con- 
ceptual model in service composition languages. In addition, we present an extension for 
BPEL4WS that adds these features, and suggest ways of describing declaratively transac- 
tional properties expressed with our proposed extension using aspect oriented technologies. 
},
	Author = {S. Castro},
	Date-Added = {2008-01-09 23:41:59 +0100},
	Date-Modified = {2011-04-08 14:44:45 +0200},
	Keywords = {Web Services composition, KALA, ACTA, Distributed programming},
	Month = {August},
	Rating = {3},
	Read = {Yes},
	School = {Vrije Universiteit Brussel (Belgium), Ecole des Mines de Nantes (France)},
	Title = {Acta Dependencies As A Unified Mechanism For Compensation, Activities Synchronization And Functional Replication In BPEL4Ws},
	Type = {Master thesis},
	Year = {2006},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAegAAAAAAegAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMU5wWNIKwAAAA/GzB0yMDA2LW1hc3RoZXJ0aGVzaXMtY2FzdHJvLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoQKUyb5soQAAAAAAAAAAAAQAAwAACSAAAAAAAAAAAAAAAAAAAAAGcGFwZXJzABAACAAAxTmzUwAAABEACAAAyb5QgQAAAAEAFAAPxswAD8H1AA+7JwAPdMMAAHwTAAIAWU1hY2ludG9zaCBIRDpVc2VyczoAc2VyZ2lvYzc4OgBEb2N1bWVudHM6AHJlc2VhcmNoOgBwYXBlcnM6ADIwMDYtbWFzdGhlcnRoZXNpcy1jYXN0cm8ucGRmAAAOADwAHQAyADAAMAA2AC0AbQBhAHMAdABoAGUAcgB0AGgAZQBzAGkAcwAtAGMAYQBzAHQAcgBvAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgBHVXNlcnMvc2VyZ2lvYzc4L0RvY3VtZW50cy9yZXNlYXJjaC9wYXBlcnMvMjAwNi1tYXN0aGVydGhlc2lzLWNhc3Ryby5wZGYAABMAAS8AABUAAgAQ//8AAIAF0hwdHh9YJGNsYXNzZXNaJGNsYXNzbmFtZaMfICFdTlNNdXRhYmxlRGF0YVZOU0RhdGFYTlNPYmplY3RfEDkuLi8uLi8uLi8uLi9yZXNlYXJjaC9wYXBlcnMvMjAwNi1tYXN0aGVydGhlc2lzLWNhc3Ryby5wZGbSHB0kJaIlIVxOU0RpY3Rpb25hcnkSAAGGoF8QD05TS2V5ZWRBcmNoaXZlcgAIABEAFgAfACgAMgA1ADoAPABFAEsAUgBdAGUAbABvAHEAcwB2AHgAegB8AIYAkwCYAKACjAKOApMCnAKnAqsCuQLAAskDBQMKAw0DGgMfAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAzE=}}

@mastersthesis{2004-engineeringhesis-castro,
	Abstract = {This thesis describes the initial module of a complex Convergent Mediation system. Its implementation has been successfully deployed in an Ecuadorian Telecom company. The main technologies involved in the system were Java and XML related specifications.},
	Author = {S. Castro and W. Maldonado},
	Date-Added = {2011-03-01 10:42:13 +0100},
	Date-Modified = {2011-04-08 14:45:01 +0200},
	Month = {December},
	School = {Escuela Superior Polit{\'e}cnica del Litoral (ESPOL) (Ecuador)},
	Title = {Analysis, Design and Implementation of a Code Generator System for the Interpretation of Distinct Call Detail Records (CDRs) Formats},
	Type = {Engineering thesis},
	Year = {2004},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAfIAAAAAAfIAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMU5wWNIKwAAAA/GzB8yMDA0LWVuZ2luZWVyaW5naGVzaSNBMkU5RkEucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoun6ycDs8gAAAAAAAAAAAAQAAwAACSAAAAAAAAAAAAAAAAAAAAAGcGFwZXJzABAACAAAxTmzUwAAABEACAAAycDQ0gAAAAEAFAAPxswAD8H1AA+7JwAPdMMAAHwTAAIAW01hY2ludG9zaCBIRDpVc2VyczoAc2VyZ2lvYzc4OgBEb2N1bWVudHM6AHJlc2VhcmNoOgBwYXBlcnM6ADIwMDQtZW5naW5lZXJpbmdoZXNpI0EyRTlGQS5wZGYAAA4AQgAgADIAMAAwADQALQBlAG4AZwBpAG4AZQBlAHIAaQBuAGcAaABlAHMAaQBzAC0AYwBhAHMAdAByAG8ALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAEpVc2Vycy9zZXJnaW9jNzgvRG9jdW1lbnRzL3Jlc2VhcmNoL3BhcGVycy8yMDA0LWVuZ2luZWVyaW5naGVzaXMtY2FzdHJvLnBkZgATAAEvAAAVAAIAEP//AACABdIcHR4fWCRjbGFzc2VzWiRjbGFzc25hbWWjHyAhXU5TTXV0YWJsZURhdGFWTlNEYXRhWE5TT2JqZWN0XxA8Li4vLi4vLi4vLi4vcmVzZWFyY2gvcGFwZXJzLzIwMDQtZW5naW5lZXJpbmdoZXNpcy1jYXN0cm8ucGRm0hwdJCWiJSFcTlNEaWN0aW9uYXJ5EgABhqBfEA9OU0tleWVkQXJjaGl2ZXIACAARABYAHwAoADIANQA6ADwARQBLAFIAXQBlAGwAbwBxAHMAdgB4AHoAfACGAJMAmACgApYCmAKdAqYCsQK1AsMCygLTAxIDFwMaAycDLAAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAM+}}

@misc{2009-sattose-castro,
	Author = {S. Castro},
	Date-Added = {2010-07-25 15:29:23 +0200},
	Date-Modified = {2011-04-03 14:13:54 +0200},
	Howpublished = {Seminar on Advanced Tools and Techniques for Software Evolution (SATToSE). Baie de Somme, France},
	Keywords = {inconsistency management},
	Month = {May},
	Title = {Inconsistency Management in Source Code with Abductive Logic Programming},
	Year = {2009}}

@misc{2010-sattose-castro,
	Author = {S. Castro},
	Date-Added = {2008-05-21 00:37:15 +0200},
	Date-Modified = {2011-04-03 14:14:00 +0200},
	Howpublished = {Seminar on Advanced Tools and Techniques for Software Evolution (SATToSE). Clapiers, France},
	Keywords = {inconsistency management},
	Month = {April},
	Title = {Diagnosis and Correction of Structural Design Inconsistencies in Software},
	Year = {2010}}

@misc{2008-sattose-castro,
	Author = {S. Castro},
	Date-Added = {2010-07-25 15:29:28 +0200},
	Date-Modified = {2011-04-03 14:14:07 +0200},
	Howpublished = {Seminar on Advanced Tools and Techniques for Software Evolution (SATToSE). Waulsort, Belgium},
	Keywords = {inconsistency management},
	Month = {February},
	Title = {Towards Semi-automatic Inconsistency Management between Design Regularities and Source Code},
	Year = {2008}}

@misc{2008-wcre-brichau,
	Author = {J. Brichau and A. Kellens and K. Mens and S. Castro},
	Date-Added = {2011-03-28 19:53:51 +0200},
	Date-Modified = {2011-04-03 14:13:45 +0200},
	Howpublished = {Working Conference on Reverse Engineering (WCRE)},
	Keywords = {IntensiVE},
	Title = {The IntensiVE Tool Suite},
	Year = {2008}}

@misc{2011-sattose-castro,
	Author = {S. Castro},
	Date-Added = {2011-04-08 14:45:58 +0200},
	Date-Modified = {2011-04-08 14:48:38 +0200},
	Howpublished = {Seminar on Advanced Tools and Techniques for Software Evolution (SATToSE). Koblenz, Germany},
	Keywords = {inconsistency management},
	Month = {April},
	Title = {Generation of corrective actions to code design problems},
	Year = {2011}}

@techreport{2009-fundp-hubaux,
	Abstract = {The problem of managing inconsistencies in and between models is omnipresent in software engineering. Over the years many different inconsistency management approaches have been proposed by the research community. Because of the large diversity of backgrounds from which these approaches originate, it is difficult to pinpoint what they have in common and what not. As a result, researchers encounter difficulties when they want to position and compare their work with existing state-of-the-art, or when they collaborate on or combine different approaches. Also, end-users have a hard time to make an informed decision when selecting the most appropriate approaches. To address these problems, we propose a unifying conceptual framework of definitions and terminology, independent of any concrete inconsistency management approach or (modelling) language. This reference framework allows to gain a common understanding of what inconsistency management involves, what an inconsistency really means, and what the possible causes of an inconsistency can be. We demonstrate the genericity and usefulness of the framework by providing concrete instantiations of it to four different inconsistency management approaches. },
	Address = {http://www.info.fundp.ac.be/~acl/P-CS-TR-WP4CM-000001.pdf},
	Author = {A. Hubaux and A. Cleve and P. Schobbens and A. Keller and O. Muliawan and S. Castro and K. Mens and D. Deridder and R. Van Der Straeten},
	Date-Added = {2010-07-25 15:20:16 +0200},
	Date-Modified = {2011-04-03 13:37:30 +0200},
	Institution = {FUNDP, Namur. Facult{\'e} d'Informatique},
	Keywords = {Inconsistency management, conceptual framework},
	Title = {Towards a Unifying Conceptual Framework for Inconsistency Management Approaches: Definitions and Instantiations},
	Type = {Research report},
	Year = {2009},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAcgAAAAAAcgAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMU5wWNIKwAAAA/GzBUyMDA5LWZ1bmRwLWh1YmF1eC5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoOwxxi+0zAAAAAAAAAAAAAQAAwAACSAAAAAAAAAAAAAAAAAAAAAGcGFwZXJzABAACAAAxTmzUwAAABEACAAAxi+YrAAAAAEAFAAPxswAD8H1AA+7JwAPdMMAAHwTAAIAUU1hY2ludG9zaCBIRDpVc2VyczoAc2VyZ2lvYzc4OgBEb2N1bWVudHM6AHJlc2VhcmNoOgBwYXBlcnM6ADIwMDktZnVuZHAtaHViYXV4LnBkZgAADgAsABUAMgAwADAAOQAtAGYAdQBuAGQAcAAtAGgAdQBiAGEAdQB4AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA/VXNlcnMvc2VyZ2lvYzc4L0RvY3VtZW50cy9yZXNlYXJjaC9wYXBlcnMvMjAwOS1mdW5kcC1odWJhdXgucGRmAAATAAEvAAAVAAIAEP//AACABdIcHR4fWCRjbGFzc2VzWiRjbGFzc25hbWWjHyAhXU5TTXV0YWJsZURhdGFWTlNEYXRhWE5TT2JqZWN0XxAxLi4vLi4vLi4vLi4vcmVzZWFyY2gvcGFwZXJzLzIwMDktZnVuZHAtaHViYXV4LnBkZtIcHSQloiUhXE5TRGljdGlvbmFyeRIAAYagXxAPTlNLZXllZEFyY2hpdmVyAAgAEQAWAB8AKAAyADUAOgA8AEUASwBSAF0AZQBsAG8AcQBzAHYAeAB6AHwAhgCTAJgAoAJsAm4CcwJ8AocCiwKZAqACqQLdAuIC5QLyAvcAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAADCQ==}}

@unpublished{2008-benevol-castro,
	Author = {S. Castro and J. Brichau and K. Mens},
	Date-Added = {2011-03-28 01:38:57 +0200},
	Date-Modified = {2011-04-05 09:56:02 +0200},
	Keywords = {Logic Abduction},
	Note = {7th BElgian-NEtherlands EVOLution Workshop (BENEVOL). Eindhoven, Netherlands},
	Title = {Towards an Automated Tool for Correcting Design Decay},
	Year = {2008}}

@unpublished{2009-benevol-castro,
	Author = {Sergio Castro and Andy Kellens and Coen De Roover and Kim Mens},
	Date-Added = {2011-03-28 01:58:43 +0200},
	Date-Modified = {2011-04-05 09:57:14 +0200},
	Keywords = {Logic Abduction},
	Note = {8th BElgian-NEtherlands EVOLution Workshop (BENEVOL). Louvain-la-Neuve, Belgium},
	Title = {Diagnosis and Correction of Structural Design Inconsistencies in Software},
	Year = {2009}}
